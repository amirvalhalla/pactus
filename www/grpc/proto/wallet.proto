syntax = 'proto3';
package pactus;

option go_package = "github.com/pactus-project/pactus/www/grpc/pactus";
option java_package = "pactus.wallet";

// Wallet service defines RPC methods for managing wallet operations.
service Wallet {
  // CreateWallet creates a new wallet with the specified parameters.
  rpc CreateWallet(CreateWalletRequest) returns (CreateWalletResponse);

  // LoadWallet loads an existing wallet with the given name.
  rpc LoadWallet(LoadWalletRequest) returns (LoadWalletResponse);

  // UnloadWallet unloads a currently loaded wallet with the specified name.
  rpc UnloadWallet(UnloadWalletRequest) returns (UnloadWalletResponse);

  // LockWallet locks a currently loaded wallet with the provided password and timeout.
  rpc LockWallet(LockWalletRequest) returns (LockWalletResponse);

  // UnlockWallet unlocks a locked wallet with the provided password and timeout.
  rpc UnlockWallet(UnlockWalletRequest) returns (UnlockWalletResponse);

  // SignRawTransaction Signs a raw transaction for a specified wallet.
  rpc SignRawTransaction(SignRawTransactionRequest) returns (SignRawTransactionResponse);
}

message CreateWalletRequest {
  string wallet_name = 1;
  string mnemonic = 2;
  string language = 3;
  string password = 4;
}

message CreateWalletResponse { string wallet_name = 1; }

message LoadWalletRequest { string wallet_name = 1; }

message LoadWalletResponse { string wallet_name = 1; }

message UnloadWalletRequest { string wallet_name = 1; }

message UnloadWalletResponse { string wallet_name = 1; }

message LockWalletRequest { string wallet_name = 1; }

message LockWalletResponse { string wallet_name = 1; }

message UnlockWalletRequest {
  string wallet_name = 1;
  string password = 2;
  int32 timeout = 3;
}

message UnlockWalletResponse { string wallet_name = 1; }

message SignRawTransactionRequest {
  string wallet_name = 1;
  bytes raw_transaction = 2;
  string password = 3;
}

message SignRawTransactionResponse {
  bytes transaction_id = 1;
  bytes signed_raw_transaction = 2;
}
