// Code generated by protoc-gen-cobra. DO NOT EDIT.

package pactus

import (
	client "github.com/NathanBaulch/protoc-gen-cobra/client"
	flag "github.com/NathanBaulch/protoc-gen-cobra/flag"
	iocodec "github.com/NathanBaulch/protoc-gen-cobra/iocodec"
	cobra "github.com/spf13/cobra"
	grpc "google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
)

func WalletClientCommand(options ...client.Option) *cobra.Command {
	cfg := client.NewConfig(options...)
	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("Wallet"),
		Short: "Wallet service client",
		Long:  "",
	}
	cfg.BindFlags(cmd.PersistentFlags())
	cmd.AddCommand(
		_WalletCreateWalletCommand(cfg),
		_WalletLoadWalletCommand(cfg),
		_WalletUnloadWalletCommand(cfg),
		_WalletLockWalletCommand(cfg),
		_WalletUnlockWalletCommand(cfg),
	)
	return cmd
}

func _WalletCreateWalletCommand(cfg *client.Config) *cobra.Command {
	req := &CreateWalletRequest{}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("CreateWallet"),
		Short: "CreateWallet RPC client",
		Long:  "",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "Wallet"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "Wallet", "CreateWallet"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewWalletClient(cc)
				v := &CreateWalletRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.CreateWallet(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	cmd.PersistentFlags().StringVar(&req.Name, cfg.FlagNamer("Name"), "", "")
	cmd.PersistentFlags().StringVar(&req.Mnemonic, cfg.FlagNamer("Mnemonic"), "", "")
	cmd.PersistentFlags().StringVar(&req.Language, cfg.FlagNamer("Language"), "", "")
	cmd.PersistentFlags().StringVar(&req.Password, cfg.FlagNamer("Password"), "", "")

	return cmd
}

func _WalletLoadWalletCommand(cfg *client.Config) *cobra.Command {
	req := &LoadWalletRequest{}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("LoadWallet"),
		Short: "LoadWallet RPC client",
		Long:  "",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "Wallet"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "Wallet", "LoadWallet"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewWalletClient(cc)
				v := &LoadWalletRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.LoadWallet(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	cmd.PersistentFlags().StringVar(&req.Name, cfg.FlagNamer("Name"), "", "")

	return cmd
}

func _WalletUnloadWalletCommand(cfg *client.Config) *cobra.Command {
	req := &UnloadWalletRequest{}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("UnloadWallet"),
		Short: "UnloadWallet RPC client",
		Long:  "",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "Wallet"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "Wallet", "UnloadWallet"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewWalletClient(cc)
				v := &UnloadWalletRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.UnloadWallet(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	cmd.PersistentFlags().StringVar(&req.Name, cfg.FlagNamer("Name"), "", "")

	return cmd
}

func _WalletLockWalletCommand(cfg *client.Config) *cobra.Command {
	req := &LockWalletRequest{}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("LockWallet"),
		Short: "LockWallet RPC client",
		Long:  "",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "Wallet"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "Wallet", "LockWallet"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewWalletClient(cc)
				v := &LockWalletRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.LockWallet(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	cmd.PersistentFlags().StringVar(&req.Password, cfg.FlagNamer("Password"), "", "")
	cmd.PersistentFlags().Int32Var(&req.Timeout, cfg.FlagNamer("Timeout"), 0, "")

	return cmd
}

func _WalletUnlockWalletCommand(cfg *client.Config) *cobra.Command {
	req := &UnlockWalletRequest{}

	cmd := &cobra.Command{
		Use:   cfg.CommandNamer("UnlockWallet"),
		Short: "UnlockWallet RPC client",
		Long:  "",
		RunE: func(cmd *cobra.Command, args []string) error {
			if cfg.UseEnvVars {
				if err := flag.SetFlagsFromEnv(cmd.Parent().PersistentFlags(), true, cfg.EnvVarNamer, cfg.EnvVarPrefix, "Wallet"); err != nil {
					return err
				}
				if err := flag.SetFlagsFromEnv(cmd.PersistentFlags(), false, cfg.EnvVarNamer, cfg.EnvVarPrefix, "Wallet", "UnlockWallet"); err != nil {
					return err
				}
			}
			return client.RoundTrip(cmd.Context(), cfg, func(cc grpc.ClientConnInterface, in iocodec.Decoder, out iocodec.Encoder) error {
				cli := NewWalletClient(cc)
				v := &UnlockWalletRequest{}

				if err := in(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.UnlockWallet(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out(res)

			})
		},
	}

	cmd.PersistentFlags().StringVar(&req.Password, cfg.FlagNamer("Password"), "", "")
	cmd.PersistentFlags().Int32Var(&req.Timeout, cfg.FlagNamer("Timeout"), 0, "")

	return cmd
}
